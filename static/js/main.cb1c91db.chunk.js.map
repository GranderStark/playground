{"version":3,"sources":["JSONValidationErrorList.tsx","SearchBar/SearchBar.tsx","ExampleDocumentsDropdown/ExampleDocumentsDropdown.tsx","AppBar/AppBar.tsx","SnackBar/SnackBar.tsx","themes/openrpcTheme.ts","PlaygroundSplitPane.tsx","hooks/useParsedSchema.tsx","hooks/useDefaultEditorValue.tsx","fetchUrlSchemaFile.tsx","fetchSchemaFromRpcDiscover.tsx","hooks/useSearchBar.tsx","hooks/useQueryParams.tsx","stores/queryParamsStore.ts","stores/searchBarStore.ts","stores/inspectorActionStore.ts","plugins/InspectorPlugin.tsx","hooks/useUISchema.tsx","stores/UISchemaStore.ts","UISchema.tsx","examplesList.tsx","OpenRPCEditor.tsx","hooks/useMonacoReplaceMetaSchema.tsx","hooks/useMonacoVimMode.tsx","App.tsx","index.tsx"],"names":["withStyles","theme","list","color","palette","secondary","main","height","listStyle","overflow","wrapper","maxHeight","props","classes","markers","length","className","map","marker","key","message","startLineNumber","startColumn","title","marginLeft","spacing","appBar","uiSchema","searchBarUrl","onChangeUrl","InputBase","value","placeholder","style","width","onChange","event","target","ExampleDocumentsDropdown","examples","React","anchorEl","setAnchorEl","Tooltip","Button","onClick","currentTarget","variant","endIcon","fontSize","Menu","id","keepMounted","open","Boolean","onClose","maxWidth","example","MenuItem","handleMenuItemClick","Grid","container","item","xs","Typography","name","url","ApplicationBar","Component","render","this","onSplitViewChange","onDarkModeChange","onExampleDocumentsDropdownChange","AppBar","position","elevation","Toolbar","alignItems","sm","md","direction","alt","src","Hidden","smDown","justify","Paper","background","padding","IconButton","NotificationType","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","debug","SnackBarCntWrapper","other","Icon","SnackbarContent","classNames","aria-describedby","icon","iconVariant","action","aria-label","close","SnackBarContentWrapper","green","backgroundColor","dark","primary","amber","opacity","marginRight","display","margin","SnackBarWrapper","notification","isEmpty","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","type","SnackBar","lightTheme","createMuiTheme","MuiAppBar","MuiCard","overrides","MuiPaper","root","zIndex","MuiToolbar","colorDefault","colorPrimary","default","darkTheme","grey","paper","MuiTable","MuiTypography","PlaygroundSplitPane","split","onlyRenderSplit","splitLeft","leftStyle","rightStyle","left","right","dir","defaultSize","window","innerHeight","innerWidth","minSize","maxSize","size","flexDirection","useParsedSchema","defaultValue","useState","parsedSchema","setParsedSchema","validateAndSetSchema","schema","maybeSchema","JSON","parse","e","refParser","dereference","then","dereferencedSchema","_","defer","localStorage","setItem","useEffect","useDefaultEditorValue","getItem","schemaUrl","a","fetch","response","status","Error","text","idCounter","body","stringify","jsonrpc","method","params","headers","json","responseJSON","result","useSearchBar","searchUrl","setSearchUrl","results","setResults","setError","match","fetchUrlSchemaFile","catch","msg","console","fetchSchemaFromRpcDiscover","useQueryParams","qs","location","search","ignoreQueryPrefix","depth","decoder","str","test","parseFloat","decodeURIComponent","createStore","queryParamStore","query","InspectorPlugin","exampleParams","searchBarStore","useInspectorActionStore","setInspectorContents","openrpcMethodObject","emptyParams","paramStructure","reduce","memo","p","request","role","useUISchema","UISchema","setUISchema","section","b","queryParamsStore","methods","OpenRPCEditor","model","editorRef","useRef","windowSize","useWindowSize","undefined","current","layout","dispose","editorOptions","useShadows","minimap","enabled","scrollBeyondLastLine","lineNumbers","editorDidMount","__","editor","modelUri","monaco","createModel","setModel","addDiagnostics","toString","onMarkerChange","onDidChangeModelDecorations","debounce","mk","getModelMarkers","resource","language","ev","useMonacoReplaceMetaSchema","metaSchema","setMetaSchema","addAction","label","keybindings","chord","CtrlCmd","KEY_K","KEY_R","contextMenuGroupId","contextMenuOrder","run","prompt","initVimMode","require","useMonacoVimMode","vimMode","setVimMode","KEY_V","App","setMarkers","setNotification","UISchemaStore","setUISchemaBySection","setEditor","horizontalSplit","privateSetHorizontalSplit","setHorizontalSplit","val","setTimeout","inspectorContents","setTheme","defaultExample","find","setReactJsonOptions","reactJsonOptions","setValue","collapseStringsAfterLength","displayDataTypes","displayObjectSize","indentWidth","currentTheme","CssBaseline","hideToggleTheme","includes","openrpcDocument","paddingTop","overflowY","marginTop","paddingBottom","ed","mks","Container","methodPlugins","Tabs","indicatorColor","bottom","marginBottom","Tab","paddingRight","border","hint","top","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cb1c91db.chunk.js","sourcesContent":["import React from \"react\";\nimport { withStyles, Theme, WithStyles } from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => ({\n  list: {\n    color: theme.palette.secondary.main,\n    height: \"100%\",\n    listStyle: \"none\",\n    overflow: \"scroll\",\n  },\n  wrapper: {\n    maxHeight: \"200px\",\n  },\n});\n\ninterface IProps extends WithStyles<typeof styles> {\n  markers: any[];\n}\n\nconst JSONValidationErrorList: React.FC<IProps> = (props) => {\n  const { classes, markers } = props;\n  if (!markers || markers.length === 0) { return null; }\n  return (\n    <div className={classes.wrapper}>\n      <ul className={classes.list}>\n        {markers && markers.map((marker) => {\n          return (\n            <li key={marker.message}>\n              {marker.startLineNumber}:{marker.startColumn} - {marker.message}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n\n};\n\nexport default withStyles(styles)(JSONValidationErrorList);\n","import React from \"react\";\nimport {\n  InputBase,\n  Theme,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport { IUISchema } from \"../UISchema\";\n\nconst styles = (theme: Theme) => ({\n  title: {\n    marginLeft: theme.spacing(2),\n  },\n  appBar: {\n  },\n});\n\ninterface IProps extends WithStyles<typeof styles> {\n  uiSchema?: IUISchema;\n  searchBarUrl: string | undefined;\n  onChangeUrl?: any;\n  onDarkModeChange?: any;\n  onSplitViewChange?: any;\n}\n\nconst SearchBar: React.FC<IProps> = (props) => {\n  const { uiSchema, searchBarUrl, onChangeUrl } = props;\n  const handleChange = (event: any) => {\n    onChangeUrl(event.target.value);\n  };\n  return (\n    <InputBase value={searchBarUrl} placeholder={uiSchema && uiSchema.appBar[\"ui:inputPlaceholder\"]} style={{ width: \"100%\" }}  onChange={handleChange}/>\n  );\n};\n\nexport default withStyles(styles)(SearchBar);\n","import * as React from \"react\";\nimport { Menu, MenuItem, Tooltip, Button, Grid, Typography } from \"@material-ui/core\";\nimport DropdownIcon from \"@material-ui/icons/ArrowDropDown\";\n\nexport interface IExample {\n  name: \"string\";\n  url: \"string\";\n}\n\ninterface IProps {\n  onChange?: (example: IExample) => any;\n  examples?: IExample[];\n}\n\nconst ExampleDocumentsDropdown: React.FC<IProps> = ({ examples, onChange }) => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (example: IExample) => {\n    setAnchorEl(null);\n    if (onChange) {\n      onChange(example);\n    }\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  if (!examples) {\n    return null;\n  }\n\n  return (\n    <>\n      <Tooltip title={\"Example OpenRPC Documents\"}>\n        <Button\n          onClick={handleClick}\n          variant=\"outlined\"\n          endIcon={<DropdownIcon />}\n          style={{ height: \"38px\", fontSize: \"11px\", marginLeft: \"10px\" }}\n        >examples</Button>\n      </Tooltip>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <div style={{ maxWidth: \"525px\" }}>\n          {examples.map((example: any) => (\n            <MenuItem onClick={(event) => handleMenuItemClick(example)}>\n              <Grid container spacing={0}>\n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle1\">{example.name}</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography variant=\"caption\" style={{ fontSize: \"9px\" }}>{example.url}</Typography>\n                </Grid>\n              </Grid>\n            </MenuItem>\n          ))}\n        </div>\n\n      </Menu>\n    </>\n  );\n};\n\nexport default ExampleDocumentsDropdown;\n","import React, { Component } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Grid,\n  IconButton,\n  Paper,\n  Theme,\n  WithStyles,\n  withStyles,\n  Hidden,\n  Tooltip,\n} from \"@material-ui/core\";\nimport FullscreenIcon from \"@material-ui/icons/Fullscreen\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { IUISchema } from \"../UISchema\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport ExampleDocumentsDropdown, { IExample } from \"../ExampleDocumentsDropdown/ExampleDocumentsDropdown\";\n\nconst styles = (theme: Theme) => ({\n  title: {\n    marginLeft: theme.spacing(2),\n  },\n  appBar: {\n  },\n});\n\ninterface IProps extends WithStyles<typeof styles> {\n  uiSchema?: IUISchema;\n  examples?: IExample[];\n  searchBarUrl?: string | undefined;\n  onChangeUrl?: any;\n  onDarkModeChange?: any;\n  onSplitViewChange?: (split: boolean) => any;\n  onExampleDocumentsDropdownChange?: (example: IExample) => any;\n}\n\nclass ApplicationBar extends Component<IProps> {\n  public render() {\n    const {\n      uiSchema,\n      classes,\n      onSplitViewChange,\n      onDarkModeChange,\n      examples,\n      onExampleDocumentsDropdownChange,\n    } = this.props;\n    return (\n      <AppBar position=\"fixed\" color=\"default\" elevation={0} className={classes.appBar}>\n        <Toolbar>\n          <Grid alignItems=\"center\" container>\n            <Grid item xs={6} sm={6} md={3} direction=\"row\" container>\n              {this.props.uiSchema && this.props.uiSchema.appBar && this.props.uiSchema.appBar[\"ui:logoUrl\"] &&\n                <Grid>\n                  <img\n                    alt=\"playground-title\"\n                    height=\"30\"\n                    src={this.props.uiSchema.appBar[\"ui:logoUrl\"]} />\n                </Grid>\n              }\n              <Grid style={{ overflow: \"hidden\" }}>\n                <Typography className={classes.title} variant=\"h6\">\n                  {uiSchema && uiSchema.appBar[\"ui:title\"]}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Hidden smDown>\n              <Grid item container justify=\"center\" alignItems=\"center\" sm={6} >\n                <Grid item sm={9}>\n                  {this.props.uiSchema && this.props.uiSchema.appBar && this.props.uiSchema.appBar[\"ui:input\"] &&\n                    <Paper style={{\n                      background: \"rgba(0, 0, 0, 0.1)\",\n                      padding: \"0px 10px 0px 10px\",\n                      width: \"100%\",\n                    }} elevation={0}>\n                      <SearchBar\n                        searchBarUrl={this.props.searchBarUrl}\n                        onChangeUrl={this.props.onChangeUrl}\n                        uiSchema={uiSchema}\n                      />\n                    </Paper>\n                  }\n                </Grid>\n                {this.props.uiSchema && this.props.uiSchema.appBar &&\n                 this.props.uiSchema.appBar[\"ui:examplesDropdown\"] &&\n                  <ExampleDocumentsDropdown examples={examples} onChange={onExampleDocumentsDropdownChange} />\n                }\n              </Grid>\n            </Hidden>\n            <Grid item xs={6} sm={6} md={3} container justify=\"flex-end\" alignItems=\"center\">\n              {uiSchema && uiSchema.appBar[\"ui:splitView\"] ?\n                <Tooltip title={\"Full Screen\"}>\n                  <IconButton onClick={() => {\n                    if (onSplitViewChange) {\n                      onSplitViewChange(false);\n                    }\n                  }}>\n                    <FullscreenIcon />\n                  </IconButton>\n                </Tooltip>\n                :\n                <Tooltip title={\"Edit\"}>\n                  <IconButton onClick={() => {\n                    if (onSplitViewChange) {\n                      onSplitViewChange(true);\n                    }\n                  }}>\n                    <EditIcon />\n                  </IconButton>\n                </Tooltip>\n              }\n              <Tooltip title=\"Toggle Dark Theme\">\n                <IconButton>\n                  {uiSchema && uiSchema.appBar[\"ui:darkMode\"] ?\n                    <Brightness3Icon onClick={() => onDarkModeChange(false)} />\n                    :\n                    <WbSunnyIcon onClick={() => onDarkModeChange(true)} />\n                  }\n                </IconButton>\n              </Tooltip>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar >\n    );\n  }\n}\nexport default withStyles(styles)(ApplicationBar);\n","import {\n  Snackbar,\n  SnackbarContent,\n  WithStyles,\n  withStyles,\n  Theme,\n} from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport { IUISchema } from \"../UISchema\";\nimport {isEmpty} from \"lodash\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport green from \"@material-ui/core/colors/green\";\nimport amber from \"@material-ui/core/colors/amber\";\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon,\n  debug: InfoIcon,\n};\n\nconst styleSnackBar = (theme: Theme) => ({\n  title: {\n    marginLeft: theme.spacing(2),\n  },\n  close: {\n    padding: theme.spacing(1),\n  },\n  margin: {\n    margin: theme.spacing(2),\n  },\n});\n\nconst styleSnackBarContent = (theme: Theme) => ({\n  success: {\n    color: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  info: {\n    color: theme.palette.primary.dark,\n  },\n  debug: {\n    color: theme.palette.secondary.dark,\n  },\n  warning: {\n    color: amber[700],\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(2),\n  },\n  message: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  close: {\n    padding: theme.spacing(1),\n  },\n  margin: {\n    margin: theme.spacing(2),\n  },\n\n});\n\nexport enum NotificationType {\n  error = \"error\",\n  warn = \"warning\",\n  info = \"info\",\n  success= \"success\",\n  debug = \"debug\",\n}\n\ninterface IProps extends WithStyles<typeof styleSnackBar> {\n  uiSchema?: IUISchema;\n  notification: ISnackBarNotification;\n  close: any;\n}\n\ninterface ISnackBarContentProps extends WithStyles<typeof styleSnackBarContent> {\n uiSchema?: IUISchema;\n onClose: any;\n variant: NotificationType;\n className: string;\n message: JSX.Element;\n}\n\nexport interface ISnackBarNotification {\n  type: NotificationType;\n  message: string;\n}\n\nclass SnackBarCntWrapper extends React.Component<ISnackBarContentProps> {\n  public render() {\n    const { classes, className, message, onClose, variant, ...other } = this.props;\n    const Icon = variantIcon[variant];\n    return (\n      <SnackbarContent\n        className={classNames(classes[variant], className)}\n        aria-describedby=\"client-snackbar\"\n        message={\n          <span id=\"client-snackbar\" className={classes.message}>\n            <Icon className={classNames(classes.icon, classes.iconVariant)} />\n            {message}\n          </span>\n        }\n        action={[\n          <IconButton\n            key=\"close\"\n            aria-label=\"Close\"\n            color=\"inherit\"\n            className={classes.close}\n            onClick={onClose}\n          >\n            <CloseIcon className={classes.icon} />\n          </IconButton>,\n        ]}\n        {...other}\n      />\n    );\n  }\n}\nconst SnackBarContentWrapper = withStyles(styleSnackBarContent)(SnackBarCntWrapper);\n\nclass SnackBarWrapper extends Component<IProps> {\n\n  public render() {\n    const { classes, notification, close } = this.props;\n    if (isEmpty(notification)) { return null; }\n    return (\n      <Snackbar\n      open\n      autoHideDuration={10000}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"left\",\n      }}>\n      <SnackBarContentWrapper\n      onClose={close}\n      variant={notification.type}\n      message={<span>{notification.message}</span>}\n      className={classes.margin}\n      />\n      </Snackbar>\n    );\n  }\n}\nexport const SnackBar = withStyles(styleSnackBar)(SnackBarWrapper);\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const lightTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  overrides: {\n    MuiPaper: {\n      root: {\n        zIndex: 1,\n        opacity: 1,\n      },\n    },\n    MuiToolbar: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiAppBar: {\n      root: {\n        backgroundColor: \"transparent !important\",\n      },\n      colorDefault: {\n        background: \"transparent !important\",\n      },\n      colorPrimary: {\n        background: \"transparent !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n  },\n  palette: {\n    type: \"dark\",\n    background: {\n      default: grey[900],\n      paper: grey[900],\n    },\n  },\n  overrides: {\n    MuiPaper: {\n      root: {\n        zIndex: 1,\n        opacity: 1,\n      },\n    },\n    MuiAppBar: {\n      root: {\n        background: \"transparent !important\",\n      },\n      colorPrimary: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiToolbar: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: grey[400],\n      },\n    },\n  },\n});\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","import SplitPane from \"react-split-pane\";\nimport React from \"react\";\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\";\n\ninterface IProps {\n  onChange?: (size: number) => any;\n  left: any;\n  right: any;\n  leftStyle?: CSSProperties;\n  rightStyle?: CSSProperties;\n  style?: CSSProperties;\n  direction?: \"horizontal\" | \"vertical\";\n  splitLeft?: boolean;\n  split?: boolean;\n  onlyRenderSplit?: boolean;\n}\n\nconst PlaygroundSplitPane: React.FC<IProps> = (props) => {\n  const handleChange = (size: number) => {\n    if (props.onChange) {\n      props.onChange(size);\n    }\n  };\n\n  if (props.split === false && props.onlyRenderSplit) {\n    return (\n      <div key={2} style={props.splitLeft ? props.leftStyle : props.rightStyle}>\n        {props.splitLeft ? props.left : props.right}\n      </div>\n    );\n  }\n\n  const dir = props.direction || \"vertical\";\n  const defaultSize = !props.split\n    ? dir === \"horizontal\" ? window.innerHeight : window.innerWidth\n    : dir === \"horizontal\" ? window.innerHeight * .35 : window.innerWidth / 2;\n  return (\n    <SplitPane split={dir}\n      style={props.style}\n      className={\"playground-splitview\"}\n      minSize={100}\n      maxSize={0}\n      defaultSize={defaultSize}\n      size={defaultSize}\n      onChange={handleChange}>\n      <div style={\n        props.leftStyle ? { ...props.leftStyle, ...{ display: \"flex\", flexDirection: \"column\", height: \"100%\" } }\n          : { display: \"flex\", flexDirection: \"column\", height: \"100%\" }\n      } key={1}>\n        {props.left}\n      </div>\n      <div key={2} style={props.rightStyle}>\n        {props.right}\n      </div>\n    </SplitPane >\n  );\n};\n\nexport default PlaygroundSplitPane;\n","import { useState, useEffect, Dispatch } from \"react\";\nimport _ from \"lodash\";\nimport refParser from \"json-schema-ref-parser\";\nimport { OpenrpcDocument } from \"@open-rpc/meta-schema\";\n\nconst useParsedSchema = (defaultValue: object | any): [OpenrpcDocument | undefined, Dispatch<string>] => {\n  const [parsedSchema, setParsedSchema]: [OpenrpcDocument | undefined, Dispatch<OpenrpcDocument>] = useState();\n  const validateAndSetSchema = (schema: string) => {\n    let maybeSchema;\n    try {\n      maybeSchema = JSON.parse(schema);\n    } catch (e) {\n      //\n    }\n    if (!maybeSchema) {\n      return;\n    }\n    refParser.dereference(maybeSchema).then((dereferencedSchema) => {\n      setParsedSchema(dereferencedSchema as OpenrpcDocument);\n      // set original non-dereff'd schema to localstorage\n      _.defer(() => window.localStorage.setItem(\"schema\", schema));\n    });\n  };\n  useEffect(() => {\n    if (defaultValue) {\n      validateAndSetSchema(defaultValue);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return [parsedSchema, validateAndSetSchema];\n};\n\nexport default useParsedSchema;\n","import { useState, Dispatch } from \"react\";\n\nfunction useDefaultEditorValue(): [string | null, Dispatch<any>] {\n  const [defaultValue, setDefaultValue] = useState<string | null>(() => {\n    return window.localStorage.getItem(\"schema\");\n  });\n  return [defaultValue, setDefaultValue];\n}\n\nexport default useDefaultEditorValue;\n","export default async (schemaUrl: string) => {\n  const response = await fetch(schemaUrl);\n  if (response.status === 404) {\n    throw new Error(\"404: Not Found\");\n  }\n  return response.text();\n};\n","let idCounter = 0;\nexport default async (url: string) => {\n  const response = await fetch(url, {\n    body: JSON.stringify({\n      id: idCounter++,\n      jsonrpc: \"2.0\",\n      method: \"rpc.discover\",\n      params: [],\n    }),\n    headers: { \"Content-Type\": \"application/json\" },\n    method: \"POST\",\n  });\n  if (response.status === 404) {\n    throw new Error(\"404: Not Found\");\n  }\n  const responseJSON = await response.json();\n  return JSON.stringify(responseJSON.result, null, 2);\n};\n","import { useState, useEffect, Dispatch } from \"react\";\nimport { isEmpty } from \"lodash\";\nimport fetchUrlSchemaFile from \"../fetchUrlSchemaFile\";\nimport fetchSchemaFromRpcDiscover from \"../fetchSchemaFromRpcDiscover\";\n\ninterface ISearchBarResponse {\n  results: any;\n  error: string | undefined;\n}\n\nconst useSearchBar = (defaultValue: string | undefined): [string | undefined, ISearchBarResponse, Dispatch<any>] => {\n  const [searchUrl, setSearchUrl] = useState<string | undefined>(defaultValue);\n  const [results, setResults] = useState();\n  const [error, setError] = useState();\n  useEffect(() => {\n    if (!searchUrl) {\n      return;\n    }\n    if (isEmpty(searchUrl)) {\n      return;\n    }\n    if (searchUrl.match(/\\.json$/)) {\n      fetchUrlSchemaFile(searchUrl)\n        .then(setResults)\n        .catch((e) => {\n          const msg = `Error fetching schema for: ${searchUrl}`;\n          console.error(msg, e);\n          setError(msg);\n        });\n    } else {\n      fetchSchemaFromRpcDiscover(searchUrl)\n        .then(setResults)\n        .catch((e) => {\n          const msg = `Error fetching rpc.discover for: ${searchUrl}`;\n          console.error(msg, e);\n          setError(msg);\n        });\n    }\n  }, [searchUrl]);\n  return [searchUrl, { results, error }, setSearchUrl];\n};\n\nexport default useSearchBar;\n","import { useState } from \"react\";\nimport * as qs from \"qs\";\n\nconst useQueryParams = () => {\n  const parse = () => {\n    return qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n      depth: 100,\n      decoder(str) {\n        if (/^(\\d+|\\d*\\.\\d+)$/.test(str)) {\n          return parseFloat(str);\n        }\n        if (str === \"false\") {\n          return false;\n        }\n        if (str === \"true\") {\n          return true;\n        }\n        return decodeURIComponent(str);\n      },\n    });\n  };\n  const [query] = useState(parse());\n  return [query];\n};\n\nexport default useQueryParams;\n","import { createStore } from \"reusable\";\nimport useQueryParams from \"../hooks/useQueryParams\";\n\nexport default createStore(() => {\n  return useQueryParams();\n});\n","import { createStore } from \"reusable\";\nimport useSearchBar from \"../hooks/useSearchBar\";\nimport queryParamStore from \"./queryParamsStore\";\n\nexport default createStore(() => {\n  const [query] = queryParamStore();\n\n  return useSearchBar(query.schemaUrl || query.url);\n});\n","import { createStore } from \"reusable\";\nimport { useState } from \"react\";\n\nexport default createStore(() => {\n  const [inspectorContents, setInspectorContents] = useState();\n  return [inspectorContents, setInspectorContents];\n});\n","import React from \"react\";\nimport { Button, Tooltip } from \"@material-ui/core\";\nimport { IMethodPluginProps } from \"@open-rpc/docs-react/build/Methods/Methods\";\nimport searchBarStore from \"../stores/searchBarStore\";\nimport { ExamplePairingObject, ExampleObject } from \"@open-rpc/meta-schema\";\nimport useInspectorActionStore from \"../stores/inspectorActionStore\";\n\nexport type TParamStructure = \"either\" | \"by-name\" | \"by-position\";\n\nconst InspectorPlugin: React.FC<IMethodPluginProps> = (props) => {\n  const [searchUrl] = searchBarStore();\n  const [, setInspectorContents] = useInspectorActionStore();\n  const method = props.openrpcMethodObject;\n  const examplePosition = 0;\n  let example;\n  let exampleParams: any;\n  let emptyParams = [] as any;\n  if (method && method.examples && method.examples[examplePosition]) {\n    example = method.examples[examplePosition] as ExamplePairingObject;\n    const paramStructure: TParamStructure = method.paramStructure || \"either\";\n    exampleParams = paramStructure === \"by-name\"\n      ? (example.params as ExampleObject[]).reduce(((memo, p) => {\n        memo[p.name] = p.value;\n        return memo;\n      }), {} as any)\n      : (example.params as ExampleObject[]).map(((p) => p.value));\n  }\n  if (method && method.paramStructure === \"by-name\") {\n    emptyParams = {};\n  }\n  return (\n    <Tooltip title=\"Open in Inspector\">\n      <Button variant=\"contained\" onClick={() => setInspectorContents({\n        url: searchUrl,\n        openrpcMethodObject: props.openrpcMethodObject,\n        request: {\n          jsonrpc: \"2.0\",\n          method: method.name,\n          params: exampleParams || emptyParams,\n          id: 0,\n        },\n      })}><span role=\"img\" aria-label=\"try-it-inspector\">🕵️‍♂️</span>️️ Try It Now</Button>\n\n    </Tooltip>\n  );\n};\n\nexport default InspectorPlugin;\n","import { useState } from \"react\";\nimport { IUISchema } from \"../UISchema\";\n\ntype SetSectionType = ({ section, key, value }: {\n  section: string;\n  key: string;\n  value: any;\n}) => any;\n\nconst useUISchema = (defaultValue: IUISchema): [IUISchema, SetSectionType] => {\n  const [UISchema, setUISchema] = useState(defaultValue);\n  const setUISchemaBySection: SetSectionType = ({ section, key, value }) => {\n    setUISchema({\n      ...UISchema,\n      [section]: {\n        ...UISchema.appBar,\n        [key]: value,\n      },\n    });\n  };\n  return [UISchema, setUISchemaBySection];\n};\n\nexport default useUISchema;\n","import { createStore } from \"reusable\";\nimport useUISchema from \"../hooks/useUISchema\";\nimport queryParamsStore from \"./queryParamsStore\";\nimport { mergeUISchema } from \"../UISchema\";\n\nexport default createStore(() => {\n  const [query] = queryParamsStore();\n\n  const defaultUISchema = {\n    appBar: {\n      \"ui:input\": true,\n      \"ui:inputPlaceholder\": \"Enter OpenRPC Document Url or rpc.discover Endpoint\",\n      /* tslint:disable */\n      \"ui:logoUrl\": \"https://github.com/open-rpc/design/raw/master/icons/open-rpc-logo-noText/open-rpc-logo-noText%20(PNG)/128x128.png\",\n      /* tslint:enable */\n      \"ui:splitView\": true,\n      \"ui:darkMode\": false,\n      \"ui:title\": \"Playground\",\n      \"ui:examplesDropdown\": true,\n    },\n    methods: {\n      \"ui:defaultExpanded\": false,\n      \"ui:methodPlugins\": true,\n    },\n    params: {\n      \"ui:defaultExpanded\": false,\n    },\n  };\n  return useUISchema(mergeUISchema(defaultUISchema, query.uiSchema));\n});\n","export interface IUISchema {\n  appBar: {\n    [\"ui:title\"]: string,\n    [\"ui:logoUrl\"]: string,\n    [\"ui:input\"]: boolean,\n    [\"ui:inputPlaceholder\"]: string,\n    [\"ui:splitView\"]: boolean,\n    [\"ui:darkMode\"]: boolean,\n    [\"ui:examplesDropdown\"]: boolean,\n  };\n  methods: {\n    [\"ui:defaultExpanded\"]: boolean,\n    [\"ui:methodPlugins\"]: boolean,\n  };\n  params: {\n    [\"ui:defaultExpanded\"]: boolean,\n  };\n}\n\nexport const mergeUISchema = (a: IUISchema, b: IUISchema) => {\n  if (a && b) {\n    return {\n      appBar: {\n        ...a.appBar,\n        ...b.appBar || {},\n      },\n      methods: {\n        ...a.methods,\n        ...b.methods || {},\n      },\n      params: {\n        ...a.params,\n        ...b.params || {},\n      },\n    };\n  } else {\n    return a || b;\n  }\n};\n","export default [\n  {\n    name: \"api-with-examples\",\n    url: \"https://raw.githubusercontent.com/open-rpc/examples/master/service-descriptions/api-with-examples-openrpc.json\", //tslint:disable-line\n  },\n  {\n    name: \"link-example\",\n    url: \"https://raw.githubusercontent.com/open-rpc/examples/master/service-descriptions/link-example-openrpc.json\", //tslint:disable-line\n  },\n  {\n    name: \"params-by-name-petstore\",\n    url: \"https://raw.githubusercontent.com/open-rpc/examples/master/service-descriptions/params-by-name-petstore-openrpc.json\", //tslint:disable-line\n  },\n  {\n    name: \"petstore-expanded\",\n    url: \"https://raw.githubusercontent.com/open-rpc/examples/master/service-descriptions/petstore-expanded-openrpc.json\", //tslint:disable-line\n  },\n  {\n    name: \"petstore\",\n    url: \"https://raw.githubusercontent.com/open-rpc/examples/master/service-descriptions/petstore-openrpc.json\", //tslint:disable-line\n  },\n  {\n    name: \"simple-math\",\n    url: \"https://raw.githubusercontent.com/open-rpc/examples/master/service-descriptions/simple-math-openrpc.json\", //tslint:disable-line\n  },\n  {\n    name: \"empty-document\",\n    url: \"https://raw.githubusercontent.com/open-rpc/examples/master/service-descriptions/empty-openrpc.json\", //tslint:disable-line\n  },\n];\n","import React, { useRef, useEffect } from \"react\";\nimport MonacoEditor from \"@etclabscore/react-monaco-editor\";\nimport * as monaco from \"monaco-editor\";\nimport useWindowSize from \"@rehooks/window-size\";\nimport { addDiagnostics } from \"@etclabscore/monaco-add-json-schema-diagnostics\";\nimport schema from \"@open-rpc/meta-schema\";\nimport _ from \"lodash\";\n\ninterface IProps {\n  onChange?: (newValue: any) => void;\n  editorDidMount?: (_: any, editor: any) => any;\n  onMarkerChange?: (markers: monaco.editor.IMarker[]) => void;\n  value: any;\n}\n\nconst OpenRPCEditor: React.FC<IProps> = (props) => {\n  const editorRef = useRef();\n  const windowSize = useWindowSize();\n  let model: any;\n\n  useEffect(() => {\n    if (editorRef !== undefined && editorRef.current !== undefined) {\n      (editorRef.current as any).layout();\n    }\n  }, [windowSize]);\n\n  useEffect(() => {\n    return function cleanup() {\n      if (model) {\n        model.dispose();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function handleEditorDidMount(__: any, editor: any) {\n    editorRef.current = editor;\n    const modelUriString = `inmemory://openrpc-playground.json`;\n    const modelUri = monaco.Uri.parse(modelUriString);\n    model = monaco.editor.createModel(props.value || \"\", \"json\", modelUri);\n    editor.setModel(model);\n    addDiagnostics(modelUri.toString(), schema, monaco);\n    if (props.editorDidMount) {\n      props.editorDidMount(_, editor);\n    }\n    if (!props.onMarkerChange) {\n      return;\n    }\n    editor.onDidChangeModelDecorations(_.debounce(() => {\n      if (props.onMarkerChange) {\n        const mk = monaco.editor.getModelMarkers({\n          resource: modelUri,\n        });\n        props.onMarkerChange(mk);\n      }\n    }, 300));\n  }\n\n  const handleChange = (ev: any, value: any) => {\n    if (props.onChange) {\n      props.onChange(value);\n    }\n  };\n\n  return (\n    <MonacoEditor\n      height=\"100%\"\n      editorOptions={{\n        useShadows: false,\n        minimap: {\n          enabled: false,\n        },\n        scrollBeyondLastLine: false,\n        lineNumbers: \"on\",\n      }}\n      value={props.value}\n      editorDidMount={handleEditorDidMount}\n      language=\"json\"\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default OpenRPCEditor;\n","import { useState, useEffect } from \"react\";\nimport * as monaco from \"monaco-editor\";\nimport schema from \"@open-rpc/meta-schema\";\n\n// Monaco Replace Meta Schema:\n// Press Chord Ctrl-K, Ctrl-R => the action will run if it is enabled\nconst useMonacoReplaceMetaSchema = (editor: monaco.editor.IStandaloneCodeEditor) => {\n  const [metaSchema, setMetaSchema] = useState(schema);\n\n  useEffect(() => {\n    if (!editor) { return; }\n\n    editor.addAction({\n      id: \"replace-meta-schema\",\n      label: \"Replace Meta Schema\",\n      keybindings: [\n        monaco.KeyMod.chord(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_K, monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_R), //tslint:disable-line\n      ],\n      contextMenuGroupId: \"navigation\",\n      contextMenuOrder: 1.5,\n      run: () => {\n        const result = window.prompt(\"Paste schema to replace current meta schema\", \"{}\");\n        if (result) {\n          setMetaSchema(JSON.parse(result));\n        }\n      },\n    });\n  }, [editor]);\n\n  return [metaSchema];\n};\n\nexport default useMonacoReplaceMetaSchema;\n","import { useState, useEffect } from \"react\";\nimport * as monaco from \"monaco-editor\";\nconst { initVimMode } = require(\"monaco-vim\"); //tslint:disable-line\n\n// Vim Mode:\n// Press Chord Ctrl-K, Ctrl-V => the action will run if it is enabled\nconst useMonacoVimMode = (editor: monaco.editor.IStandaloneCodeEditor) => {\n  const [vimMode, setVimMode] = useState();\n\n  useEffect(() => {\n    if (!editor) { return; }\n\n    editor.addAction({\n      id: \"vim-mode\",\n      label: \"Vim Mode\",\n      keybindings: [\n        monaco.KeyMod.chord(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_K, monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_V), //tslint:disable-line\n      ],\n      contextMenuGroupId: \"navigation\",\n      contextMenuOrder: 1.5,\n      run: () => {\n        if (vimMode) {\n          vimMode.dispose();\n        }\n        setVimMode(initVimMode(editor));\n      },\n    });\n\n    return () => {\n      if (vimMode) {\n        vimMode.dispose();\n      }\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor]);\n\n  return [editor, vimMode];\n};\n\nexport default useMonacoVimMode;\n","import React, { useState, useEffect, Dispatch } from \"react\";\nimport JSONValidationErrorList from \"./JSONValidationErrorList\";\nimport * as monaco from \"monaco-editor\";\nimport { Documentation } from \"@open-rpc/docs-react\";\nimport \"./App.css\";\nimport AppBar from \"./AppBar/AppBar\";\nimport { IUISchema } from \"./UISchema\";\nimport { SnackBar, ISnackBarNotification, NotificationType } from \"./SnackBar/SnackBar\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { lightTheme, darkTheme } from \"./themes/openrpcTheme\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport { CssBaseline, Container, Tab, Typography, IconButton, Tooltip, Tabs } from \"@material-ui/core\";\nimport PlaygroundSplitPane from \"./PlaygroundSplitPane\";\nimport useParsedSchema from \"./hooks/useParsedSchema\";\nimport useDefaultEditorValue from \"./hooks/useDefaultEditorValue\";\nimport InspectorPlugin from \"./plugins/InspectorPlugin\";\nimport UISchemaStore from \"./stores/UISchemaStore\";\nimport searchBarStore from \"./stores/searchBarStore\";\nimport examples from \"./examplesList\";\nimport OpenRPCEditor from \"./OpenRPCEditor\";\nimport useMonacoReplaceMetaSchema from \"./hooks/useMonacoReplaceMetaSchema\";\nimport useMonacoVimMode from \"./hooks/useMonacoVimMode\";\nimport { IExample } from \"./ExampleDocumentsDropdown/ExampleDocumentsDropdown\";\nimport Inspector from \"@open-rpc/inspector\";\nimport useInspectorActionStore from \"./stores/inspectorActionStore\";\n\nconst App: React.FC = () => {\n  const [defaultValue] = useDefaultEditorValue();\n  const [markers, setMarkers] = useState<monaco.editor.IMarker[]>([] as monaco.editor.IMarker[]);\n  const [searchUrl, { results, error }, setSearchUrl] = searchBarStore();\n  const [notification, setNotification] = useState<ISnackBarNotification | undefined>();\n  const [UISchema, setUISchemaBySection]: [IUISchema, any] = UISchemaStore();\n  const [editor, setEditor]: [any, Dispatch<{}>] = useState();\n  const [horizontalSplit, privateSetHorizontalSplit] = useState(false);\n  const [parsedSchema, setParsedSchema] = useParsedSchema(\n    defaultValue ? JSON.parse(defaultValue) : null,\n  );\n  const setHorizontalSplit = (val: boolean) => {\n    if (editor) {\n      setTimeout(() => {\n        editor.layout();\n      }, 0);\n    }\n    privateSetHorizontalSplit(val);\n  };\n  const [inspectorContents] = useInspectorActionStore();\n  useMonacoReplaceMetaSchema(editor);\n  useMonacoVimMode(editor);\n\n  const handleEditorDidMount = (__: any, ed: any) => {\n    setEditor(ed);\n  };\n\n  useEffect(() => {\n    monaco.editor.setTheme(UISchema.appBar[\"ui:darkMode\"] ? \"vs-dark\" : \"vs\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const defaultExample = examples.find((e) => e.name === \"petstore\");\n    if (!defaultValue && !searchUrl && defaultExample) {\n      setSearchUrl(defaultExample.url);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [defaultValue]);\n\n  useEffect(() => {\n    setReactJsonOptions({\n      ...reactJsonOptions,\n      theme: UISchema.appBar[\"ui:darkMode\"] ? \"summerfruit\" : \"summerfruit:inverted\",\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [UISchema.appBar[\"ui:darkMode\"]]);\n\n  useEffect(() => {\n    if (results && editor) {\n      editor.setValue(results);\n    }\n    if (results) {\n      setParsedSchema(results!);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [results]);\n\n  useEffect(() => {\n    if (error) {\n      setNotification({\n        type: NotificationType.error,\n        message: error,\n      });\n    }\n  }, [error]);\n\n  useEffect(() => {\n    setParsedSchema(defaultValue || \"\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [defaultValue]);\n  const [reactJsonOptions, setReactJsonOptions] = useState({\n    theme: \"summerfruit:inverted\",\n    collapseStringsAfterLength: 25,\n    displayDataTypes: false,\n    displayObjectSize: false,\n    indentWidth: 2,\n    name: false,\n  });\n  const currentTheme = UISchema.appBar[\"ui:darkMode\"] ? darkTheme : lightTheme;\n  useEffect(() => {\n    if (inspectorContents) {\n      setHorizontalSplit(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inspectorContents]);\n  return (\n    <MuiThemeProvider theme={currentTheme}>\n      <CssBaseline />\n      <AppBar\n        searchBarUrl={searchUrl}\n        uiSchema={UISchema}\n        examples={examples as IExample[]}\n        onExampleDocumentsDropdownChange={(example: IExample) => setSearchUrl(example.url)}\n        onSplitViewChange={(value) => {\n          setUISchemaBySection({\n            value,\n            key: \"ui:splitView\",\n            section: \"appBar\",\n          });\n        }}\n        onDarkModeChange={(value: boolean) => {\n          monaco.editor.setTheme(value ? \"vs-dark\" : \"vs\");\n          setUISchemaBySection({\n            value,\n            key: \"ui:darkMode\",\n            section: \"appBar\",\n          });\n        }}\n        onChangeUrl={setSearchUrl}\n      />\n      <PlaygroundSplitPane\n        direction=\"horizontal\"\n        splitLeft={true}\n        split={horizontalSplit}\n        leftStyle={{\n          width: \"100%\",\n          height: \"100%\",\n        }}\n        right={\n          <>\n            <Inspector hideToggleTheme={true} url={\n              searchUrl && searchUrl.includes(\".json\") ? null : searchUrl\n            }\n              request={inspectorContents && inspectorContents.request}\n              openrpcDocument={parsedSchema}\n            />\n          </>\n        }\n        onChange={() => editor && editor.layout()}\n        left={\n          <PlaygroundSplitPane\n            onlyRenderSplit={true}\n            split={UISchema.appBar[\"ui:splitView\"]}\n            leftStyle={{\n              paddingTop: \"58px\",\n              height: \"94%\",\n              width: \"100%\",\n            }}\n            rightStyle={{\n              height: \"94%\",\n              width: \"100%\",\n              overflowY: \"auto\",\n              marginTop: \"58px\",\n              paddingBottom: \"58px\",\n            }}\n            onChange={() => editor && editor.layout()}\n            left={\n              <>\n                <JSONValidationErrorList markers={markers} />\n                <OpenRPCEditor\n                  editorDidMount={handleEditorDidMount}\n                  onMarkerChange={(mks) => {\n                    setMarkers(mks);\n                  }}\n                  onChange={(val) => {\n                    setParsedSchema(val);\n                  }}\n                  value={defaultValue || \"\"}\n                />\n              </>\n            }\n            right={\n              <>\n                <Container>\n                  <Documentation\n                    schema={parsedSchema as any}\n                    uiSchema={UISchema}\n                    reactJsonOptions={reactJsonOptions}\n                    methodPlugins={\n                      UISchema.methods[\"ui:methodPlugins\"]\n                        ? [InspectorPlugin]\n                        : undefined\n                    }\n                  />\n                </Container>\n                <Tabs\n                  variant=\"scrollable\"\n                  indicatorColor=\"primary\"\n                  value={0}\n                  style={{ position: \"absolute\", bottom: \"0\", right: \"25px\", zIndex: 1, marginBottom: \"0px\" }}\n                >\n                  <Tab\n                    onClick={() => setHorizontalSplit(!horizontalSplit)}\n                    style={{\n                      background: currentTheme.palette.background.default,\n                      width: \"165px\",\n                      paddingRight: \"30px\",\n                      border: `1px solid ${currentTheme.palette.text.hint}`,\n                    }}\n                    label={\n                      <div>\n                        <Typography\n                          variant=\"body1\"><span role=\"img\" aria-label=\"inspector\">🕵️‍♂️</span>️ Inspector</Typography>\n                        <Tooltip title=\"Toggle Inspector\">\n                          <IconButton style={{ position: \"absolute\", right: \"5px\", top: \"20%\" }} size=\"small\">\n                            {horizontalSplit\n                              ? <ExpandMore />\n                              : <ExpandLess />\n                            }\n                          </IconButton>\n                        </Tooltip>\n                      </div>\n                    }>\n                  </Tab>\n                </Tabs>\n              </>\n            }\n          />\n\n        }\n      />\n      <SnackBar\n        close={() => setNotification({} as ISnackBarNotification)}\n        notification={notification as ISnackBarNotification} />\n    </MuiThemeProvider>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ReusableProvider } from \"reusable\";\n\nReactDOM.render(\n  <ReusableProvider>\n    <App />\n  </ReusableProvider>\n, document.getElementById(\"root\"));\n"],"sourceRoot":""}